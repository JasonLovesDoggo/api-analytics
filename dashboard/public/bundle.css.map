{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Browser.svelte",
    "Device.svelte",
    "Endpoints.svelte",
    "Footer.svelte",
    "OperatingSystem.svelte",
    "PastMonth.svelte",
    "Requests.svelte",
    "ResponseTimes.svelte",
    "SuccessRate.svelte",
    "Dashboard.svelte",
    "Generate.svelte",
    "Home.svelte",
    "SignIn.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction getBrowser(userAgent) {\r\n    if (userAgent.match(/Seamonkey\\//)) {\r\n        return 'Seamonkey';\r\n    }\r\n    else if (userAgent.match(/Firefox\\//)) {\r\n        return 'Firefox';\r\n    }\r\n    else if (userAgent.match(/Chrome\\//)) {\r\n        return 'Chrome';\r\n    }\r\n    else if (userAgent.match(/Chromium\\//)) {\r\n        return 'Chromium';\r\n    }\r\n    else if (userAgent.match(/Safari\\//)) {\r\n        return 'Safari';\r\n    }\r\n    else if (userAgent.match(/Edg\\//)) {\r\n        return 'Edge';\r\n    }\r\n    else if (userAgent.match(/OPR\\//) || userAgent.match(/Opera\\//)) {\r\n        return 'Opera';\r\n    }\r\n    else if (userAgent.match(/; MSIE /) || userAgent.match(/Trident\\//)) {\r\n        return 'Internet Explorer';\r\n    }\r\n    else if (userAgent.match(/curl\\//)) {\r\n        return 'Curl';\r\n    }\r\n    else if (userAgent.match(/PostmanRuntime\\//)) {\r\n        return 'Postman';\r\n    }\r\n    else if (userAgent.match(/insomnia\\//)) {\r\n        return 'Insomnia';\r\n    }\r\n    else {\r\n        return 'Other';\r\n    }\r\n}\r\nfunction browserPlotLayout() {\r\n    let monthAgo = new Date();\r\n    monthAgo.setDate(monthAgo.getDate() - 30);\r\n    let tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    return {\r\n        title: false,\r\n        autosize: true,\r\n        margin: { r: 35, l: 70, t: 10, b: 20, pad: 0 },\r\n        hovermode: \"closest\",\r\n        plot_bgcolor: \"transparent\",\r\n        paper_bgcolor: \"transparent\",\r\n        height: 180,\r\n        yaxis: {\r\n            title: { text: \"Requests\" },\r\n            gridcolor: \"gray\",\r\n            showgrid: false,\r\n            fixedrange: true,\r\n        },\r\n        xaxis: {\r\n            visible: false,\r\n        },\r\n        dragmode: false,\r\n    };\r\n}\r\nlet colors = [\r\n    \"#3FCF8E\",\r\n    \"#E46161\",\r\n    \"#EBEB81\", // Yellow\r\n];\r\nfunction pieChart() {\r\n    let browserCount = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let browser = getBrowser(data[i].user_agent);\r\n        if (!(browser in browserCount)) {\r\n            browserCount[browser] = 0;\r\n        }\r\n        browserCount[browser]++;\r\n    }\r\n    let browsers = [];\r\n    let count = [];\r\n    for (let browser in browserCount) {\r\n        browsers.push(browser);\r\n        count.push(browserCount[browser]);\r\n    }\r\n    return [{\r\n            values: count,\r\n            labels: browsers,\r\n            type: 'pie',\r\n            marker: {\r\n                colors: colors\r\n            },\r\n        }];\r\n}\r\nfunction browserPlotData() {\r\n    return {\r\n        data: pieChart(),\r\n        layout: browserPlotLayout(),\r\n        config: {\r\n            responsive: true,\r\n            showSendToCloud: false,\r\n            displayModeBar: false,\r\n        },\r\n    };\r\n}\r\nfunction genPlot() {\r\n    let plotData = browserPlotData();\r\n    //@ts-ignore\r\n    new Plotly.newPlot(plotDiv, plotData.data, plotData.layout, plotData.config);\r\n}\r\nlet plotDiv;\r\nonMount(() => {\r\n    genPlot();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\" title=\"Last week\">\r\n  <div class=\"card-title\">Browser</div>\r\n  <div id=\"plotly\">\r\n    <div id=\"plotDiv\" bind:this={plotDiv}>\r\n      <!-- Plotly chart will be drawn inside this DIV -->\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    margin: 2em 2em 2em 0;\r\n    padding-bottom: 1em;\r\n    flex: 1;\r\n  }\r\n  #plotDiv {\r\n    margin-right: 20px;\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction getDevice(userAgent) {\r\n    if (userAgent.match(/iPhone/)) {\r\n        return 'iPhone';\r\n    }\r\n    else if (userAgent.match(/Android/)) {\r\n        return 'Android';\r\n    }\r\n    else if (userAgent.match(/Tizen\\//)) {\r\n        return 'Samsung';\r\n    }\r\n    else {\r\n        return 'Other';\r\n    }\r\n}\r\nfunction devicePlotLayout() {\r\n    return {\r\n        title: false,\r\n        autosize: true,\r\n        margin: { r: 35, l: 70, t: 10, b: 20, pad: 0 },\r\n        hovermode: \"closest\",\r\n        plot_bgcolor: \"transparent\",\r\n        paper_bgcolor: \"transparent\",\r\n        height: 180,\r\n        yaxis: {\r\n            title: { text: \"Requests\" },\r\n            gridcolor: \"gray\",\r\n            showgrid: false,\r\n            fixedrange: true,\r\n        },\r\n        xaxis: {\r\n            visible: false,\r\n        },\r\n        dragmode: false,\r\n    };\r\n}\r\nlet colors = [\r\n    \"#3FCF8E\",\r\n    \"#E46161\",\r\n    \"#EBEB81\", // Yellow\r\n];\r\nfunction pieChart() {\r\n    let deviceCount = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let browser = getDevice(data[i].user_agent);\r\n        if (!(browser in deviceCount)) {\r\n            deviceCount[browser] = 0;\r\n        }\r\n        deviceCount[browser]++;\r\n    }\r\n    let device = [];\r\n    let count = [];\r\n    for (let browser in deviceCount) {\r\n        device.push(browser);\r\n        count.push(deviceCount[browser]);\r\n    }\r\n    return [{\r\n            values: count,\r\n            labels: device,\r\n            type: 'pie',\r\n            marker: {\r\n                colors: colors\r\n            },\r\n        }];\r\n}\r\nfunction devicePlotData() {\r\n    return {\r\n        data: pieChart(),\r\n        layout: devicePlotLayout(),\r\n        config: {\r\n            responsive: true,\r\n            showSendToCloud: false,\r\n            displayModeBar: false,\r\n        },\r\n    };\r\n}\r\nfunction genPlot() {\r\n    let plotData = devicePlotData();\r\n    //@ts-ignore\r\n    new Plotly.newPlot(plotDiv, plotData.data, plotData.layout, plotData.config);\r\n}\r\nlet plotDiv;\r\nonMount(() => {\r\n    genPlot();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\" title=\"Last week\">\r\n  <div class=\"card-title\">Device</div>\r\n  <div id=\"plotly\">\r\n    <div id=\"plotDiv\" bind:this={plotDiv}>\r\n      <!-- Plotly chart will be drawn inside this DIV -->\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    margin: 2em 0;\r\n    padding-bottom: 1em;\r\n    flex: 1;\r\n  }\r\n  #plotDiv {\r\n    margin-right: 20px;\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction endpointFreq() {\r\n    let freq = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let endpointID = data[i].path + data[i].status;\r\n        if (!(endpointID in freq)) {\r\n            freq[endpointID] = {\r\n                path: data[i].path,\r\n                status: data[i].status,\r\n                count: 0,\r\n            };\r\n        }\r\n        freq[endpointID].count++;\r\n    }\r\n    return freq;\r\n}\r\nfunction build() {\r\n    let freq = endpointFreq();\r\n    let freqArr = [];\r\n    maxCount = 0;\r\n    for (let endpointID in freq) {\r\n        freqArr.push(freq[endpointID]);\r\n        if (freq[endpointID].count > maxCount) {\r\n            maxCount = freq[endpointID].count;\r\n        }\r\n    }\r\n    freqArr.sort((a, b) => {\r\n        return b.count - a.count;\r\n    });\r\n    endpoints = freqArr;\r\n}\r\nfunction setEndpointLabelVisibility(idx) {\r\n    let endpoint = document.getElementById(`endpoint-label-${idx}`);\r\n    let endpointPath = document.getElementById(`endpoint-path-${idx}`);\r\n    let endpointCount = document.getElementById(`endpoint-count-${idx}`);\r\n    let externalLabel = document.getElementById(`external-label-${idx}`);\r\n    if (endpoint.clientWidth <\r\n        endpointPath.clientWidth + endpointCount.clientWidth) {\r\n        externalLabel.style.display = \"flex\";\r\n        endpointPath.style.display = \"none\";\r\n    }\r\n}\r\nfunction setEndpointLabels() {\r\n    for (let i = 0; i < endpoints.length; i++) {\r\n        setEndpointLabelVisibility(i);\r\n    }\r\n}\r\nonMount(() => {\r\n    build();\r\n    setTimeout(setEndpointLabels, 50);\r\n});\r\nlet endpoints;\r\nlet maxCount;\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\">\r\n  <div class=\"card-title\">Endpoints</div>\r\n  {#if endpoints != undefined}\r\n    <div class=\"endpoints\">\r\n      {#each endpoints as endpoint, i}\r\n        <div class=\"endpoint-container\">\r\n          <div\r\n            class=\"endpoint\"\r\n            id=\"endpoint-{i}\"\r\n            style=\"width: {(endpoint.count / maxCount) *\r\n              100}%; background: {endpoint.status >= 200 &&\r\n            endpoint.status <= 299\r\n              ? 'var(--highlight)'\r\n              : '#e46161'}\"\r\n          >\r\n            <div class=\"endpoint-label\" id=\"endpoint-label-{i}\">\r\n              <div class=\"path\" id=\"endpoint-path-{i}\">\r\n                {endpoint.path}\r\n              </div>\r\n              <div class=\"count\" id=\"endpoint-count-{i}\">{endpoint.count}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"external-label\" id=\"external-label-{i}\">\r\n            <div class=\"external-label-path\">\r\n              {endpoint.path}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      {/each}\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    min-height: 361px;\r\n  }\r\n  .endpoints {\r\n    margin: 1em 20px 0.6em;\r\n  }\r\n  .endpoint {\r\n    border-radius: 3px;\r\n    margin: 6px 0;\r\n    color: var(--light-background);\r\n    text-align: left;\r\n    position: relative;\r\n  }\r\n  .endpoint-label {\r\n    display: flex;\r\n  }\r\n  .path,\r\n  .count {\r\n    padding: 3px 15px;\r\n  }\r\n  .path {\r\n    flex-grow: 1;\r\n  }\r\n  .endpoint-container {\r\n    display: flex;\r\n  }\r\n  .external-label {\r\n    padding: 3px 15px;\r\n    left: 40px;\r\n    top: 0;\r\n    margin: 6px 0;\r\n    color: #707070;\r\n    display: none;\r\n  }\r\n\r\n</style>\r\n",
    "<div class=\"footer\">API Analytics</div>\r\n<img class=\"footer-logo\" src=\"../img/logo.png\" alt=\"\">\r\n\r\n<style>\r\n  .footer {\r\n    font-size: 0.9em;\r\n    color: var(--highlight);\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction getOS(userAgent) {\r\n    if (userAgent.match(/Win16/)) {\r\n        return 'Windows 3.11';\r\n    }\r\n    else if (userAgent.match(/(Windows 95)|(Win95)|(Windows_95)/)) {\r\n        return 'Windows 95';\r\n    }\r\n    else if (userAgent.match(/(Windows 98)|(Win98)/)) {\r\n        return 'Windows 98';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 5.0)|(Windows 2000)/)) {\r\n        return 'Windows 2000';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 5.1)|(Windows XP)/)) {\r\n        return 'Windows XP';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 5.2)/)) {\r\n        return 'Windows Server 2003';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 6.0)/)) {\r\n        return 'Windows Vista';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 6.1)/)) {\r\n        return 'Windows 7';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 6.2)/)) {\r\n        return 'Windows 8';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 10.0)/)) {\r\n        return 'Windows 10';\r\n    }\r\n    else if (userAgent.match(/(Windows NT 4.0)|(WinNT4.0)|(WinNT)|(Windows NT)/)) {\r\n        return 'Windows NT 4.0';\r\n    }\r\n    else if (userAgent.match(/Windows ME/)) {\r\n        return 'Windows ME';\r\n    }\r\n    else if (userAgent.match(/OpenBSD/)) {\r\n        return 'OpenBSE';\r\n    }\r\n    else if (userAgent.match(/SunOS/)) {\r\n        return 'SunOS';\r\n    }\r\n    else if (userAgent.match(/(Linux)|(X11)/)) {\r\n        return 'Linux';\r\n    }\r\n    else if (userAgent.match(/(Mac_PowerPC)|(Macintosh)/)) {\r\n        return 'MacOS';\r\n    }\r\n    else if (userAgent.match(/QNX/)) {\r\n        return 'QNX';\r\n    }\r\n    else if (userAgent.match(/BeOS/)) {\r\n        return 'BeOS';\r\n    }\r\n    else if (userAgent.match(/OS\\/2/)) {\r\n        return 'OS/2';\r\n    }\r\n    else if (userAgent.match(/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/)) {\r\n        return 'Search Bot';\r\n    }\r\n    else {\r\n        return 'Unknown';\r\n    }\r\n}\r\nfunction osPlotLayout() {\r\n    let monthAgo = new Date();\r\n    monthAgo.setDate(monthAgo.getDate() - 30);\r\n    let tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    return {\r\n        title: false,\r\n        autosize: true,\r\n        margin: { r: 35, l: 70, t: 10, b: 20, pad: 0 },\r\n        hovermode: \"closest\",\r\n        plot_bgcolor: \"transparent\",\r\n        paper_bgcolor: \"transparent\",\r\n        height: 180,\r\n        yaxis: {\r\n            title: { text: \"Requests\" },\r\n            gridcolor: \"gray\",\r\n            showgrid: false,\r\n            fixedrange: true,\r\n        },\r\n        xaxis: {\r\n            visible: false,\r\n        },\r\n        dragmode: false,\r\n    };\r\n}\r\nlet colors = [\r\n    \"#3FCF8E\",\r\n    \"#E46161\",\r\n    \"#EBEB81\", // Yellow\r\n];\r\nfunction pieChart() {\r\n    let osCount = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let os = getOS(data[i].user_agent);\r\n        if (!(os in osCount)) {\r\n            osCount[os] = 0;\r\n        }\r\n        osCount[os]++;\r\n    }\r\n    let os = [];\r\n    let count = [];\r\n    for (let browser in osCount) {\r\n        os.push(browser);\r\n        count.push(osCount[browser]);\r\n    }\r\n    return [{\r\n            values: count,\r\n            labels: os,\r\n            type: 'pie',\r\n            marker: {\r\n                colors: colors\r\n            },\r\n        }];\r\n}\r\nfunction osPlotData() {\r\n    return {\r\n        data: pieChart(),\r\n        layout: osPlotLayout(),\r\n        config: {\r\n            responsive: true,\r\n            showSendToCloud: false,\r\n            displayModeBar: false,\r\n        },\r\n    };\r\n}\r\nfunction genPlot() {\r\n    let plotData = osPlotData();\r\n    //@ts-ignore\r\n    new Plotly.newPlot(plotDiv, plotData.data, plotData.layout, plotData.config);\r\n}\r\nlet plotDiv;\r\nonMount(() => {\r\n    genPlot();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\" title=\"Last week\">\r\n  <div class=\"card-title\">OS</div>\r\n  <div id=\"plotly\">\r\n    <div id=\"plotDiv\" bind:this={plotDiv}>\r\n      <!-- Plotly chart will be drawn inside this DIV -->\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    margin: 2em 2em 2em 0;\r\n    flex: 1;\r\n    padding-bottom: 1em;\r\n  }\r\n  #plotDiv {\r\n    margin-right: 20px;\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction pastMonth(date) {\r\n    let monthAgo = new Date();\r\n    monthAgo.setDate(monthAgo.getDate() - 30);\r\n    return date > monthAgo;\r\n}\r\nlet colors = [\r\n    \"#444444\",\r\n    \"#E46161\",\r\n    \"#F18359\",\r\n    \"#F5A65A\",\r\n    \"#F3C966\",\r\n    \"#EBEB81\",\r\n    \"#C7E57D\",\r\n    \"#A1DF7E\",\r\n    \"#77D884\",\r\n    \"#3FCF8E\", // Green\r\n];\r\nfunction daysAgo(date) {\r\n    let now = new Date();\r\n    return Math.floor((now.getTime() - date.getTime()) / (24 * 60 * 60 * 1000));\r\n}\r\nfunction setSuccessRate() {\r\n    let success = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let date = new Date(data[i].created_at);\r\n        if (pastMonth(date)) {\r\n            date.setHours(0, 0, 0, 0);\r\n            // @ts-ignore\r\n            if (!(date in success)) {\r\n                // @ts-ignore\r\n                success[date] = { total: 0, successful: 0 };\r\n            }\r\n            if (data[i].status >= 200 && data[i].status <= 299) {\r\n                // @ts-ignore\r\n                success[date].successful++;\r\n            }\r\n            // @ts-ignore\r\n            success[date].total++;\r\n        }\r\n    }\r\n    let successArr = new Array(60).fill(-0.1); // -0.1 -> 0\r\n    for (let date in success) {\r\n        let idx = daysAgo(new Date(date));\r\n        successArr[successArr.length - idx] = success[date].successful / success[date].total;\r\n    }\r\n    successRate = successArr;\r\n}\r\nfunction responseTimePlotLayout() {\r\n    let monthAgo = new Date();\r\n    monthAgo.setDate(monthAgo.getDate() - 30);\r\n    let tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    return {\r\n        title: false,\r\n        autosize: true,\r\n        margin: { r: 35, l: 70, t: 10, b: 20, pad: 0 },\r\n        hovermode: \"closest\",\r\n        plot_bgcolor: \"transparent\",\r\n        paper_bgcolor: \"transparent\",\r\n        height: 150,\r\n        yaxis: {\r\n            title: { text: \"Response time (ms)\" },\r\n            gridcolor: \"gray\",\r\n            showgrid: false,\r\n            fixedrange: true,\r\n        },\r\n        xaxis: {\r\n            title: { text: \"Date\" },\r\n            showgrid: false,\r\n            fixedrange: true,\r\n            range: [monthAgo, tomorrow],\r\n            visible: false,\r\n        },\r\n        dragmode: false,\r\n    };\r\n}\r\nfunction responseTimeLine() {\r\n    let points = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        points.push([new Date(data[i].created_at), data[i].response_time]);\r\n    }\r\n    points.sort((a, b) => {\r\n        return a[0] - b[0];\r\n    });\r\n    let dates = [];\r\n    let responses = [];\r\n    for (let i = 0; i < points.length; i++) {\r\n        dates.push(points[i][0]);\r\n        responses.push(points[i][1]);\r\n    }\r\n    return [\r\n        {\r\n            x: dates,\r\n            y: responses,\r\n            mode: \"lines\",\r\n            line: { color: \"#3fcf8e\" },\r\n            hovertemplate: `<b>%{y:.1f}ms avg</b><br>%{x|%d %b %Y}</b><extra></extra>`,\r\n            showlegend: false,\r\n        },\r\n    ];\r\n}\r\nfunction responseTimePlotData() {\r\n    return {\r\n        data: responseTimeLine(),\r\n        layout: responseTimePlotLayout(),\r\n        config: {\r\n            responsive: true,\r\n            showSendToCloud: false,\r\n            displayModeBar: false,\r\n        },\r\n    };\r\n}\r\nfunction genResponseTimePlot() {\r\n    let plotData = responseTimePlotData();\r\n    //@ts-ignore\r\n    new Plotly.newPlot(responseTimePlotDiv, plotData.data, plotData.layout, plotData.config);\r\n}\r\nfunction requestsFreqPlotLayout() {\r\n    let monthAgo = new Date();\r\n    monthAgo.setDate(monthAgo.getDate() - 30);\r\n    let tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    return {\r\n        title: false,\r\n        autosize: true,\r\n        margin: { r: 35, l: 70, t: 10, b: 20, pad: 0 },\r\n        hovermode: \"closest\",\r\n        plot_bgcolor: \"transparent\",\r\n        paper_bgcolor: \"transparent\",\r\n        height: 150,\r\n        yaxis: {\r\n            title: { text: \"Requests\" },\r\n            gridcolor: \"gray\",\r\n            showgrid: false,\r\n            fixedrange: true,\r\n        },\r\n        xaxis: {\r\n            title: { text: \"Date\" },\r\n            fixedrange: true,\r\n            range: [monthAgo, tomorrow],\r\n            visible: false,\r\n        },\r\n        dragmode: false,\r\n    };\r\n}\r\nfunction requestsFreqLine() {\r\n    let requestFreq = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let date = new Date(data[i].created_at);\r\n        date.setHours(0, 0, 0, 0);\r\n        // @ts-ignore\r\n        if (!(date in requestFreq)) {\r\n            // @ts-ignore\r\n            requestFreq[date] = 0;\r\n        }\r\n        // @ts-ignore\r\n        requestFreq[date]++;\r\n    }\r\n    let requestFreqArr = [];\r\n    for (let date in requestFreq) {\r\n        requestFreqArr.push([new Date(date), requestFreq[date]]);\r\n    }\r\n    requestFreqArr.sort((a, b) => {\r\n        return a[0] - b[0];\r\n    });\r\n    let dates = [];\r\n    let requests = [];\r\n    for (let i = 0; i < requestFreqArr.length; i++) {\r\n        dates.push(requestFreqArr[i][0]);\r\n        requests.push(requestFreqArr[i][1]);\r\n    }\r\n    return [\r\n        {\r\n            x: dates,\r\n            y: requests,\r\n            type: \"bar\",\r\n            marker: { color: \"#3fcf8e\" },\r\n            hovertemplate: `<b>%{y} requests</b><br>%{x|%d %b %Y}</b><extra></extra>`,\r\n            showlegend: false,\r\n        },\r\n    ];\r\n}\r\nfunction requestsFreqPlotData() {\r\n    return {\r\n        data: requestsFreqLine(),\r\n        layout: requestsFreqPlotLayout(),\r\n        config: {\r\n            responsive: true,\r\n            showSendToCloud: false,\r\n            displayModeBar: false,\r\n        },\r\n    };\r\n}\r\nfunction genRequestsFreqPlot() {\r\n    let plotData = requestsFreqPlotData();\r\n    //@ts-ignore\r\n    new Plotly.newPlot(requestsFreqPlotDiv, plotData.data, plotData.layout, plotData.config);\r\n}\r\nfunction build() {\r\n    setSuccessRate();\r\n    genResponseTimePlot();\r\n    genRequestsFreqPlot();\r\n}\r\nlet successRate;\r\nlet responseTimePlotDiv;\r\nlet requestsFreqPlotDiv;\r\nonMount(() => {\r\n    build();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\">\r\n  <div class=\"card-title\">Past Month</div>\r\n  <div id=\"plotly\">\r\n    <div id=\"plotDiv\" bind:this={requestsFreqPlotDiv}>\r\n      <!-- Plotly chart will be drawn inside this DIV -->\r\n    </div>\r\n  </div>\r\n  <div id=\"plotly\">\r\n    <div id=\"plotDiv\" bind:this={responseTimePlotDiv}>\r\n      <!-- Plotly chart will be drawn inside this DIV -->\r\n    </div>\r\n  </div>\r\n  <div class=\"success-rate-container\">\r\n    {#if successRate != undefined}\r\n      <div class=\"success-rate-title\">Success rate</div>\r\n      <div class=\"errors\">\r\n        {#each successRate as value, i}\r\n          <div\r\n            class=\"error\"\r\n            style=\"background: {colors[Math.floor(value * 10) + 1]}\"\r\n            title=\"{(value * 100).toFixed(1)}%\"\r\n          />\r\n        {/each}\r\n      </div>\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    margin: 0;\r\n    width: 100%;\r\n  }\r\n  .errors {\r\n    display: flex;\r\n    margin-top: 8px;\r\n  }\r\n  .error {\r\n    background: var(--highlight);\r\n    flex: 1;\r\n    height: 40px;\r\n    margin: 0 1px;\r\n    border-radius: 1px;\r\n  }\r\n  .success-rate-container {\r\n    text-align: left;\r\n    font-size: 0.9em;\r\n    color: #707070;\r\n    /* color: rgb(68, 68, 68); */\r\n  }\r\n  .success-rate-container {\r\n    margin: 1.5em 2em 2em;\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction thisWeek(date) {\r\n    let weekAgo = new Date();\r\n    weekAgo.setDate(weekAgo.getDate() - 7);\r\n    return date > weekAgo;\r\n}\r\nfunction build() {\r\n    let totalRequests = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        let date = new Date(data[i].created_at);\r\n        if (thisWeek(date)) {\r\n            totalRequests++;\r\n        }\r\n    }\r\n    requestsPerHour = ((24 * 7) / totalRequests).toFixed(2);\r\n}\r\nlet requestsPerHour;\r\nonMount(() => {\r\n    build();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\" title=\"Last week\">\r\n  <div class=\"card-title\">\r\n    Requests <span class=\"per-hour\">/ hour</span>\r\n  </div>\r\n  {#if requestsPerHour != undefined}\r\n    <div class=\"value\">{requestsPerHour}</div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    width: calc(200px - 1em);\r\n    margin: 0 1em 0 2em;\r\n  }\r\n  .value {\r\n    margin: 20px 0;\r\n    font-size: 1.8em;\r\n    font-weight: 600;\r\n  }\r\n  .per-hour {\r\n    color: var(--dim-text);\r\n    font-size: 0.8em;\r\n    margin-left: 4px;\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\n// Median and quartiles from StackOverflow answer\r\n// https://stackoverflow.com/a/55297611/8851732\r\nconst asc = (arr) => arr.sort((a, b) => a - b);\r\nconst sum = (arr) => arr.reduce((a, b) => a + b, 0);\r\nconst mean = (arr) => sum(arr) / arr.length;\r\n// sample standard deviation\r\nfunction std(arr) {\r\n    const mu = mean(arr);\r\n    const diffArr = arr.map((a) => (a - mu) ** 2);\r\n    return Math.sqrt(sum(diffArr) / (arr.length - 1));\r\n}\r\nfunction quantile(arr, q) {\r\n    const sorted = asc(arr);\r\n    const pos = (sorted.length - 1) * q;\r\n    const base = Math.floor(pos);\r\n    const rest = pos - base;\r\n    if (sorted[base + 1] !== undefined) {\r\n        return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\r\n    }\r\n    else {\r\n        return sorted[base];\r\n    }\r\n}\r\nfunction markerPosition(x) {\r\n    let position = Math.log10(x) * 125 - 300;\r\n    if (position < 0) {\r\n        return 0;\r\n    }\r\n    else if (position > 100) {\r\n        return 100;\r\n    }\r\n    else {\r\n        return position;\r\n    }\r\n}\r\nfunction setMarkerPosition(median) {\r\n    let position = markerPosition(median);\r\n    marker.style.left = `${position}%`;\r\n}\r\nfunction build() {\r\n    let responseTimes = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        responseTimes.push(data[i].response_time);\r\n    }\r\n    median = quantile(responseTimes, 0.25);\r\n    LQ = quantile(responseTimes, 0.5);\r\n    UQ = quantile(responseTimes, 0.75);\r\n    setMarkerPosition(median);\r\n}\r\nlet median, LQ, UQ;\r\nlet marker;\r\nonMount(() => {\r\n    build();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\">\r\n  <div class=\"card-title\">\r\n    Response Times <span class=\"milliseconds\">(ms)</span>\r\n  </div>\r\n  <div class=\"values\">\r\n    <div class=\"value lower-quartile\">{LQ}</div>\r\n    <div class=\"value median\">{median}</div>\r\n    <div class=\"value upper-quartile\">{UQ}</div>\r\n  </div>\r\n  <div class=\"labels\">\r\n    <div class=\"label\">25%</div>\r\n    <div class=\"label\">Median</div>\r\n    <div class=\"label\">75%</div>\r\n  </div>\r\n  <div class=\"bar\">\r\n    <div class=\"bar-green\" />\r\n    <div class=\"bar-yellow\" />\r\n    <div class=\"bar-red\" />\r\n    <div class=\"marker\" bind:this={marker} />\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .values {\r\n    display: flex;\r\n    color: var(--highlight);\r\n    font-size: 1.8em;\r\n    font-weight: 700;\r\n  }\r\n  .values,\r\n  .labels {\r\n    margin: 0 0.5rem;\r\n  }\r\n  .value {\r\n    flex: 1;\r\n    font-size: 1.1em;\r\n    padding: 20px 20px 4px;\r\n  }\r\n  .labels {\r\n    display: flex;\r\n    font-size: 0.8em;\r\n    color: var(--dim-text);\r\n  }\r\n  .label {\r\n    flex: 1;\r\n  }\r\n\r\n  .milliseconds {\r\n    color: var(--dim-text);\r\n    font-size: 0.8em;\r\n    margin-left: 4px;\r\n  }\r\n\r\n  .median {\r\n    font-size: 1em;\r\n  }\r\n  .upper-quartile,\r\n  .lower-quartile {\r\n    font-size: 1em;\r\n    padding-bottom: 0;\r\n  }\r\n\r\n  .bar {\r\n    padding: 20px 0 20px;\r\n    display: flex;\r\n    height: 30px;\r\n    width: 85%;\r\n    margin: auto;\r\n    align-items: center;\r\n    position: relative;\r\n  }\r\n  .bar-green {\r\n    background: var(--highlight);\r\n    width: 75%;\r\n    height: 10px;\r\n    border-radius: 2px 0 0 2px;\r\n  }\r\n  .bar-yellow {\r\n    width: 15%;\r\n    height: 10px;\r\n    background: rgb(235, 235, 129);\r\n  }\r\n  .bar-red {\r\n    width: 20%;\r\n    height: 10px;\r\n    border-radius: 0 2px 2px 0;\r\n    background: rgb(228, 97, 97);\r\n  }\r\n  .marker {\r\n    position: absolute;\r\n    height: 30px;\r\n    width: 5px;\r\n    background: white;\r\n    border-radius: 2px;\r\n    left: 0; /* Changed during runtime to reflect median */\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nfunction pastWeek(date) {\r\n    let weekAgo = new Date();\r\n    weekAgo.setDate(weekAgo.getDate() - 7);\r\n    return date > weekAgo;\r\n}\r\nfunction build() {\r\n    let totalRequests = 0;\r\n    let successfulRequests = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        let date = new Date(data[i].created_at);\r\n        if (pastWeek(date)) {\r\n            if (data[i].status >= 200 && data[i].status <= 299) {\r\n                successfulRequests++;\r\n            }\r\n            totalRequests++;\r\n        }\r\n    }\r\n    successRate = (successfulRequests / totalRequests) * 100;\r\n}\r\nlet successRate;\r\nonMount(() => {\r\n    build();\r\n});\r\nexport let data;\r\n</script>\r\n\r\n<div class=\"card\" title=\"Last week\">\r\n  <div class=\"card-title\">Success Rate</div>\r\n  {#if successRate != undefined}\r\n    <div\r\n      class=\"value\"\r\n      style=\"color: {successRate <= 75 ? 'var(--red)' : ''}{successRate > 75 &&\r\n      successRate < 90\r\n        ? 'var(--yellow)'\r\n        : ''}{successRate >= 90 ? 'var(--highlight)' : ''}\"\r\n    >\r\n      {successRate.toFixed(1)}%\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    width: calc(200px - 1em);\r\n    margin: 0 0 0 1em;\r\n  }\r\n\r\n  .value {\r\n    margin: 20px 0;\r\n    font-size: 1.8em;\r\n    font-weight: 600;\r\n    color: var(--yellow);\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\r\nimport Requests from \"../components/Requests.svelte\";\r\nimport ResponseTimes from \"../components/ResponseTimes.svelte\";\r\nimport Endpoints from \"../components/Endpoints.svelte\";\r\nimport Footer from \"../components/Footer.svelte\";\r\nimport SuccessRate from \"../components/SuccessRate.svelte\";\r\nimport PastMonth from \"../components/PastMonth.svelte\";\r\nimport Browser from \"../components/Browser.svelte\";\r\nimport OperatingSystem from \"../components/OperatingSystem.svelte\";\r\nimport Device from \"../components/Device.svelte\";\r\nfunction formatUUID(userID) {\r\n    return `${userID.slice(0, 8)}-${userID.slice(8, 12)}-${userID.slice(12, 16)}-${userID.slice(16, 20)}-${userID.slice(20)}`;\r\n}\r\nasync function fetchData() {\r\n    userID = formatUUID(userID);\r\n    // Fetch page ID\r\n    try {\r\n        const response = await fetch(`https://api-analytics-server.vercel.app/api/data/${userID}`);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            data = json.value;\r\n            console.log(data);\r\n        }\r\n    }\r\n    catch (e) {\r\n        failed = true;\r\n    }\r\n}\r\nlet data;\r\nlet failed = false;\r\nonMount(() => {\r\n    fetchData();\r\n});\r\nexport let userID;\r\n</script>\r\n\r\n<div>\r\n  {#if data != undefined}\r\n    <div class=\"dashboard\">\r\n      <div class=\"left\">\r\n        <div class=\"row\">\r\n          <Requests {data} />\r\n          <SuccessRate {data} />\r\n        </div>\r\n        <ResponseTimes {data} />\r\n        <Endpoints {data} />\r\n      </div>\r\n      <div class=\"right\">\r\n        <PastMonth {data} />\r\n        <div class=\"row\">\r\n          <OperatingSystem {data} />\r\n          <Browser {data} />\r\n          <Device {data} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    {/if}\r\n    {#if failed}\r\n      <div class=\"no-requests\">No requests currently logged.</div>\r\n    {/if}\r\n  <Footer />\r\n</div>\r\n\r\n<style>\r\n  .dashboard {\r\n    margin: 5em;\r\n    display: flex;\r\n  }\r\n  .row {\r\n    display: flex;\r\n  }\r\n  .right {\r\n    flex-grow: 1;\r\n  }\r\n  .no-requests {\r\n    height: 70vh;\r\n    font-size: 1.5em;\r\n    display: grid;\r\n    place-items: center;\r\n    color: var(--highlight);\r\n  }\r\n\r\n</style>",
    "<script lang=\"ts\">let loading = false;\r\nlet generatedKey = false;\r\nlet apiKey = \"\";\r\nlet generateBtn;\r\nlet copyBtn;\r\nlet copiedNotification;\r\nasync function genAPIKey() {\r\n    if (!generatedKey) {\r\n        loading = true;\r\n        const response = await fetch(\"https://api-analytics-server.vercel.app/api/generate-api-key\");\r\n        if (response.status == 200) {\r\n            const data = await response.json();\r\n            generatedKey = true;\r\n            apiKey = data.value;\r\n            generateBtn.style.display = \"none\";\r\n            copyBtn.style.display = \"grid\";\r\n        }\r\n        loading = false;\r\n    }\r\n}\r\nfunction copyToClipboard() {\r\n    navigator.clipboard.writeText(apiKey);\r\n    copyBtn.value = \"Copied\";\r\n    copiedNotification.style.visibility = \"visible\";\r\n}\r\n</script>\r\n\r\n<div class=\"generate\">\r\n  <div class=\"content\">\r\n    <h2>Generate API key</h2>\r\n    <input type=\"text\" readonly bind:value={apiKey} />\r\n    <button id=\"generateBtn\" on:click={genAPIKey} bind:this={generateBtn}\r\n      >Generate</button\r\n    >\r\n    <button id=\"copyBtn\" on:click={copyToClipboard} bind:this={copyBtn}\r\n      ><img class=\"copy-icon\" src=\"img/copy.png\" alt=\"\" /></button\r\n    >\r\n    <div id=\"copied\" bind:this={copiedNotification}>Copied!</div>\r\n\r\n    <div class=\"spinner\">\r\n      <div class=\"loader\" style=\"display: {loading ? 'initial' : 'none'}\" />\r\n    </div>\r\n\r\n    <div class=\"details\">\r\n      <div class=\"keep-secure\">Keep your API key safe and secure.</div>\r\n      <div class=\"highlight logo\">API Analytics</div>\r\n      <img class=\"footer-logo\" src=\"img/logo.png\" alt=\"\">\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .generate {\r\n    display: grid;\r\n    place-items: center;\r\n  }\r\n  h2 {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\r\n      Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\r\n    margin: 0 0 1em;\r\n    font-size: 2em;\r\n  }\r\n  .content {\r\n    width: fit-content;\r\n    background: #343434;\r\n    background: #1c1c1c;\r\n    padding: 3.5em 4em 4em;\r\n    border-radius: 9px;\r\n    margin: 20vh 0 2vh;\r\n  }\r\n  input {\r\n    background: #1c1c1c;\r\n    background: #343434;\r\n    border: none;\r\n    padding: 0 20px;\r\n    width: 300px;\r\n    font-size: 1em;\r\n    text-align: center;\r\n    height: 40px;\r\n    border-radius: 4px;\r\n    margin-bottom: 2.5em;\r\n    color: white;\r\n    display: grid;\r\n  }\r\n  button {\r\n    height: 40px;\r\n    border-radius: 4px;\r\n    padding: 0 20px;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100px;\r\n  }\r\n  .highlight {\r\n    color: #3fcf8e;\r\n  }\r\n  .details {\r\n    font-size: 0.8em;\r\n  }\r\n  .keep-secure {\r\n    color: #5a5a5a;\r\n    margin-bottom: 1em;\r\n  }\r\n\r\n  #copyBtn {\r\n    background: #1c1c1c;\r\n    display: none;\r\n    background: #343434;\r\n    place-items: center;\r\n    margin: auto;\r\n  }\r\n  .copy-icon {\r\n    filter: contrast(0.3);\r\n    height: 20px;\r\n  }\r\n  #copied {\r\n    color: var(--highlight);\r\n    margin: 2em auto auto;\r\n    visibility: hidden;\r\n    height: 1em;\r\n  }\r\n\r\n  .spinner {\r\n    height: 7em;\r\n    margin-bottom: 5em;\r\n  }\r\n  #generateBtn {\r\n    background: #3fcf8e;\r\n  }\r\n\r\n</style>\r\n",
    "<div class=\"home\">\r\n<img class=\"logo\" src=\"img/home-logo2.png\" alt=\"\" />\r\n<h1>API Analytics</h1>\r\n\r\n<div class=\"links\">\r\n  <a href=\"/generate\" class=\"link\"> <div class=\"text\">API key</div></a>\r\n  <a href=\"/dashboard\" class=\"link\"> <div class=\"text\">Dashboard</div></a>\r\n</div>\r\n</div>\r\n\r\n<style scoped>\r\n  .home {\r\n    display: grid;\r\n    place-items: center;\r\n  }\r\n  .logo {\r\n    width: 700px;\r\n    margin-bottom: -80px;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 2.5em;\r\n  }\r\n\r\n  .links {\r\n    color: #707070;\r\n    display: flex;\r\n    width: 400px;\r\n    margin: 30px auto auto;\r\n    flex-direction: column;\r\n  }\r\n  .link {\r\n    width: fit-content;\r\n    margin: 10px auto;\r\n    color: #707070;\r\n    color: white;\r\n    font-size: 0.9;\r\n  }\r\n  .link:hover {\r\n    color: var(--highlight);\r\n  }\r\n\r\n</style>\r\n",
    "<script lang=\"ts\">let apiKey = \"\";\r\nlet loading = false;\r\nasync function genAPIKey() {\r\n    loading = true;\r\n    // Fetch page ID\r\n    const response = await fetch(`https://api-analytics-server.vercel.app/api/user-id/${apiKey}`);\r\n    console.log(response);\r\n    if (response.status == 200) {\r\n        const data = await response.json();\r\n        window.location.href = `/dashboard/${data.value.replaceAll(\"-\", \"\")}`;\r\n    }\r\n    loading = false;\r\n}\r\n</script>\r\n\r\n<div class=\"generate\">\r\n  <div class=\"content\">\r\n    <h2>Dashboard</h2>\r\n    <input type=\"text\" bind:value={apiKey} placeholder=\"Enter API key\"/>\r\n    <button id=\"generateBtn\" on:click={genAPIKey}>Load</button>\r\n    <div class=\"spinner\">\r\n      <div class=\"loader\" style=\"display: {loading ? 'initial' : 'none'}\" />\r\n    </div>\r\n    <div class=\"details\">\r\n      <div class=\"keep-secure\">Keep your API key safe and secure.</div>\r\n      <div class=\"highlight logo\">API Analytics</div>\r\n      <img class=\"footer-logo\" src=\"img/logo.png\" alt=\"\">\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .generate {\r\n    display: grid;\r\n    place-items: center;\r\n  }\r\n  h2 {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\r\n      Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\r\n    margin: 0 0 1em;\r\n    font-size: 2em;\r\n  }\r\n  .content {\r\n    width: fit-content;\r\n    background: #343434;\r\n    background: #1c1c1c;\r\n    padding: 3.5em 4em 4em;\r\n    border-radius: 9px;\r\n    margin: 20vh 0 2vh;\r\n  }\r\n  input {\r\n    background: #1c1c1c;\r\n    background: #343434;\r\n    border: none;\r\n    padding: 0 20px;\r\n    width: 300px;\r\n    font-size: 1em;\r\n    text-align: center;\r\n    height: 40px;\r\n    border-radius: 4px;\r\n    margin-bottom: 2.5em;\r\n    color: white;\r\n    display: grid;\r\n  }\r\n  button {\r\n    height: 40px;\r\n    border-radius: 4px;\r\n    padding: 0 20px;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100px;\r\n  }\r\n  .highlight {\r\n    color: #3fcf8e;\r\n  }\r\n  .details {\r\n    /* margin-top: 15rem; */\r\n    font-size: 0.8em;\r\n  }\r\n  .keep-secure {\r\n    color: #5a5a5a;\r\n    margin-bottom: 1em;\r\n  }\r\n  #generateBtn {\r\n    background: #3fcf8e;\r\n  }\r\n\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}